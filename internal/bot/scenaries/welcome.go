package scenaries

import (
	"HabitMuse/internal/constants"
	"HabitMuse/internal/session"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
)

type Welcome struct {
	sessionService session.Service
	api            *tgbotapi.BotAPI
}

func InitWelcome(service session.Service, api *tgbotapi.BotAPI) Welcome {
	return Welcome{
		sessionService: service,
		api:            api,
	}
}
func (s Welcome) StepResolver(sess *session.Session, update *tgbotapi.Update) error {
	log.Println("Welcome step resolver ")
	if update.CallbackQuery != nil {
		callback := update.CallbackQuery
		switch callback.Data {
		case "start_registration":
			sess.Scenario = constants.ScenarioRegistration
			msg := tgbotapi.NewMessage(callback.From.ID, "–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º! üöÄ")
			_, err := s.api.Send(msg)
			if err != nil {
				return err
			}

		case "remind_later":
			sess.Scenario = constants.MainMenu
			msg := tgbotapi.NewMessage(callback.From.ID, "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ ‚è≥")
			_, err := s.api.Send(msg)
			if err != nil {
				return err
			}

		case constants.ScenarioWelcome:
			return s.sendWelcomeMessage(sess)
		}

		return nil
	}
	return s.sendWelcomeMessage(sess)
}

func (s Welcome) sendWelcomeMessage(sess *session.Session) error {
	welcomeMessage := "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HabitMuse!**\n\n–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n\nüß† –ó–¥–µ—Å—å —Ç—ã –Ω–∞—á–Ω—ë—à—å –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –¥–µ–Ω—å –∑–∞ –¥–Ω—ë–º.\n\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å—Ç—Ä–æ–π –ø—Ä–∏–≤—ã—á–∫–∏, –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –ø—É—Ç–∏.\n\nüí™ –ú–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è ‚Äî –≤–µ–ª–∏–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω—ã –∑–∞–≤—Ç—Ä–∞.\n\n‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å ‚Äî –¥–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\nHabitMuse –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –µ–º—É –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è —á—É—Ç–æ—á–∫—É –±–ª–∏–∂–µ.\n\nüìù –û—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–≤–µ—Ç—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n–ì–æ—Ç–æ–≤–∞?"

	msg := tgbotapi.NewMessage(sess.UserID, welcomeMessage)

	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöÄ –ü–æ–µ—Ö–∞–ª–∏", "start_registration"),
			tgbotapi.NewInlineKeyboardButtonData("‚è≥ –ù–∞–ø–æ–º–Ω–∏ –ø–æ—Ç–æ–º", "remind_later"),
		),
	)
	msg.ReplyMarkup = buttons
	_, err := s.api.Send(msg)
	if err != nil {
		log.Printf("Welcome: Failed to send the message: %v", err)
		return err
	}
	return nil
}
