package body_metrics

import (
	"fmt"
	"reflect"
)

type MetricInfo struct {
	Name  string
	Emoji string
	Unit  string
}

var MetricsMeta = map[string]MetricInfo{
	"Weight":        {"–í–µ—Å", "‚öñÔ∏è", "–∫–≥"},
	"BicepsLeft":    {"–ë–∏—Ü–µ–ø—Å (–ª–µ–≤)", "üí™", "—Å–º"},
	"BicepsRight":   {"–ë–∏—Ü–µ–ø—Å (–ø—Ä–∞–≤)", "üí™", "—Å–º"},
	"Chest":         {"–ì—Ä—É–¥—å", "üèãÔ∏è", "—Å–º"},
	"Waist":         {"–¢–∞–ª–∏—è", "üìè", "—Å–º"},
	"Belly":         {"–ñ–∏–≤–æ—Ç", "üßç", "—Å–º"},
	"Hips":          {"–ë—ë–¥—Ä–∞", "ü¶µ", "—Å–º"},
	"ThighMaxLeft":  {"–ë–µ–¥—Ä–æ –≤–µ—Ä—Ö (–ª–µ–≤)", "ü¶ø", "—Å–º"},
	"ThighMaxRight": {"–ë–µ–¥—Ä–æ –≤–µ—Ä—Ö (–ø—Ä–∞–≤)", "ü¶ø", "—Å–º"},
	"ThighLowLeft":  {"–ë–µ–¥—Ä–æ –Ω–∏–∑ (–ª–µ–≤)", "ü¶ø", "—Å–º"},
	"ThighLowRight": {"–ë–µ–¥—Ä–æ –Ω–∏–∑ (–ø—Ä–∞–≤)", "ü¶ø", "—Å–º"},
}

type BodyProgress struct {
	Weight        *MetricProgress
	BicepsLeft    *MetricProgress
	BicepsRight   *MetricProgress
	Chest         *MetricProgress
	Waist         *MetricProgress
	Belly         *MetricProgress
	Hips          *MetricProgress
	ThighMaxLeft  *MetricProgress
	ThighMaxRight *MetricProgress
	ThighLowLeft  *MetricProgress
	ThighLowRight *MetricProgress
}

type MetricProgress struct {
	Current              *float64 // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
	ChangeFromFirst      *float64 // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ —Ç–µ–∫—É—â–∏–º
	ChangeFromSecondLast *float64 // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏ —Ç–µ–∫—É—â–∏–º
}

func (s *service) GenerationReport(userId int64) (string, error) {
	metrics, err := s.repo.GetAllByUserID(userId)
	if err != nil {
		return "", err
	}
	if len(metrics) == 0 {
		return "", fmt.Errorf("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
	}
	firstMetric := metrics[0]
	if len(metrics) == 1 {
		str := "üöÄ –¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –∏ —ç—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞!\n –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
		bodyProgress := makeBodyProgress(firstMetric, nil, nil)
		str += getMeasurementsString(bodyProgress)
		str += "üèÅ –í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏! –î–æ–±–∞–≤—å –Ω–æ–≤—ã–π –∑–∞–º–µ—Ä —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å ‚ú®"
		return str, nil
	}

	lastMetric := metrics[len(metrics)-1]
	if len(metrics) == 2 {
		str := "üìä –ü–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üéâ\n "
		bodyProgress := makeBodyProgress(lastMetric, firstMetric, nil)
		str += getMeasurementsString(bodyProgress)
		str += "üèÅ –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ ‚ú®"
		return str, nil
	}

	secondLastMetric := metrics[len(metrics)-2]
	str := "üìà –£ —Ç–µ–±—è –Ω–∞–∫–æ–ø–∏–ª–∞—Å—å —Ö–æ—Ä–æ—à–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞! üéâ\n"
	bodyProgress := makeBodyProgress(lastMetric, firstMetric, secondLastMetric)
	str += getMeasurementsString(bodyProgress)
	str += "üìä –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ä—ã, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.\nüèÅ –í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º! ‚ú®"
	return str, nil
}

func makeBodyProgress(last, first, secondLast *BodyMetric) *BodyProgress {
	if last == nil {
		return nil
	}

	f := func(m *BodyMetric) *BodyMetric {
		if m == nil {
			return &BodyMetric{}
		}
		return m
	}

	first = f(first)
	secondLast = f(secondLast)

	return &BodyProgress{
		Weight:        makeMetricProgress(last.Weight, first.Weight, secondLast.Weight),
		BicepsLeft:    makeMetricProgress(last.BicepsLeft, first.BicepsLeft, secondLast.BicepsLeft),
		BicepsRight:   makeMetricProgress(last.BicepsRight, first.BicepsRight, secondLast.BicepsRight),
		Chest:         makeMetricProgress(last.Chest, first.Chest, secondLast.Chest),
		Waist:         makeMetricProgress(last.Waist, first.Waist, secondLast.Waist),
		Belly:         makeMetricProgress(last.Belly, first.Belly, secondLast.Belly),
		Hips:          makeMetricProgress(last.Hips, first.Hips, secondLast.Hips),
		ThighMaxLeft:  makeMetricProgress(last.ThighMaxLeft, first.ThighMaxLeft, secondLast.ThighMaxLeft),
		ThighMaxRight: makeMetricProgress(last.ThighMaxRight, first.ThighMaxRight, secondLast.ThighMaxRight),
		ThighLowLeft:  makeMetricProgress(last.ThighLowLeft, first.ThighLowLeft, secondLast.ThighLowLeft),
		ThighLowRight: makeMetricProgress(last.ThighLowRight, first.ThighLowRight, secondLast.ThighLowRight),
	}

}

func makeMetricProgress(last, first, secondLast *float64) *MetricProgress {
	if last == nil {
		return nil
	}
	var changeFromFirst *float64
	if first != nil {
		diff := *last - *first
		changeFromFirst = &diff
	}

	var changeFromSecondLast *float64
	if secondLast != nil {
		diff := *last - *secondLast
		changeFromSecondLast = &diff
	}

	return &MetricProgress{
		Current:              last,
		ChangeFromFirst:      changeFromFirst,
		ChangeFromSecondLast: changeFromSecondLast,
	}
}

func getMeasurementsString(progress *BodyProgress) string {
	result := ""
	t := reflect.TypeOf(*progress)
	valueRef := reflect.ValueOf(*progress)

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		valueField := valueRef.Field(i)
		if valueField.Kind() != reflect.Ptr || valueField.IsNil() {
			continue
		}

		val := valueField.Elem().Interface().(MetricProgress)
		info, ok := MetricsMeta[field.Name]
		if !ok {
			info = MetricInfo{
				Name:  field.Name,
				Unit:  "nil",
				Emoji: "‚ùì",
			}
		}
		result += formatMetric(info, val)
	}
	return result
}

func formatMetric(info MetricInfo, progress MetricProgress) string {
	if progress.Current == nil {
		return ""
	}
	currentVal := fmt.Sprintf("%.1f", *progress.Current)
	if progress.ChangeFromFirst == nil {
		return fmt.Sprintf("%s %s: %s %s\n", info.Emoji, info.Name, currentVal, info.Unit)
	}

	f := func(f float64) string {
		if *progress.ChangeFromFirst > 0 {
			return fmt.Sprintf("+%.1f", f)
		}
		return fmt.Sprintf("%.1f", f)
	}
	changeFromFirstVal := f(*progress.ChangeFromFirst)
	if progress.ChangeFromSecondLast == nil {
		return fmt.Sprintf("%s %s: %s %s / %s %s\n", info.Emoji, info.Name, currentVal, info.Unit, changeFromFirstVal, info.Unit)
	}
	changeFromSecondLastVal := f(*progress.ChangeFromSecondLast)
	return fmt.Sprintf("%s %s: %s %s / %s %s, –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: %s %s\n", info.Emoji, info.Name, currentVal, info.Unit, changeFromSecondLastVal, info.Unit, changeFromFirstVal, info.Unit)
}
