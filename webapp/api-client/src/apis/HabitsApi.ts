/* tslint:disable */
/* eslint-disable */
/**
 * HabitMuse API
 * API для управления привычками и пользователями
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtoErrorResponse,
  HabitsCompletionRequest,
  HabitsCreateHabitDto,
  HabitsHabitCompletionDto,
  HabitsHabitDto,
  HabitsUpdateHabitDto,
} from '../models/index';
import {
    DtoErrorResponseFromJSON,
    DtoErrorResponseToJSON,
    HabitsCompletionRequestFromJSON,
    HabitsCompletionRequestToJSON,
    HabitsCreateHabitDtoFromJSON,
    HabitsCreateHabitDtoToJSON,
    HabitsHabitCompletionDtoFromJSON,
    HabitsHabitCompletionDtoToJSON,
    HabitsHabitDtoFromJSON,
    HabitsHabitDtoToJSON,
    HabitsUpdateHabitDtoFromJSON,
    HabitsUpdateHabitDtoToJSON,
} from '../models/index';

export interface ApiHabitCompletionDateGetRequest {
    date: string;
}

export interface ApiHabitCreatePostRequest {
    request: HabitsCreateHabitDto;
}

export interface ApiHabitGroupIdGetRequest {
    groupId: string;
}

export interface ApiHabitUpdateGroupIdPutRequest {
    groupId: string;
    request: HabitsUpdateHabitDto;
}

export interface ApiHabitVersionIdDatePatchRequest {
    versionId: number;
    date: string;
    request: HabitsCompletionRequest;
}

/**
 * HabitsApi - interface
 * 
 * @export
 * @interface HabitsApiInterface
 */
export interface HabitsApiInterface {
    /**
     * Returns all completed or active habits for a user on a given date
     * @param {string} date Date in format YYYY-MM-DD
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HabitsApiInterface
     */
    apiHabitCompletionDateGetRaw(requestParameters: ApiHabitCompletionDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HabitsHabitCompletionDto>>>;

    /**
     * Returns all completed or active habits for a user on a given date
     */
    apiHabitCompletionDateGet(requestParameters: ApiHabitCompletionDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HabitsHabitCompletionDto>>;

    /**
     * 
     * @summary Создать новую привычку
     * @param {HabitsCreateHabitDto} request CreateHabitDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HabitsApiInterface
     */
    apiHabitCreatePostRaw(requestParameters: ApiHabitCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HabitsHabitDto>>;

    /**
     * Создать новую привычку
     */
    apiHabitCreatePost(requestParameters: ApiHabitCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HabitsHabitDto>;

    /**
     * Returns all active habits for the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HabitsApiInterface
     */
    apiHabitGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HabitsHabitDto>>>;

    /**
     * Returns all active habits for the authenticated user
     */
    apiHabitGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HabitsHabitDto>>;

    /**
     * Returns a single active habit by group ID
     * @param {string} groupId Habit group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HabitsApiInterface
     */
    apiHabitGroupIdGetRaw(requestParameters: ApiHabitGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HabitsHabitDto>>;

    /**
     * Returns a single active habit by group ID
     */
    apiHabitGroupIdGet(requestParameters: ApiHabitGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HabitsHabitDto>;

    /**
     * 
     * @summary Обновить привычку
     * @param {string} groupId ID группы привычки
     * @param {HabitsUpdateHabitDto} request UpdateHabitDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HabitsApiInterface
     */
    apiHabitUpdateGroupIdPutRaw(requestParameters: ApiHabitUpdateGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HabitsHabitDto>>;

    /**
     * Обновить привычку
     */
    apiHabitUpdateGroupIdPut(requestParameters: ApiHabitUpdateGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HabitsHabitDto>;

    /**
     * 
     * @summary Отметить выполнение привычки на дату
     * @param {number} versionId ID версии привычки
     * @param {string} date Дата (в формате 2006-01-02)
     * @param {HabitsCompletionRequest} request Completion status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HabitsApiInterface
     */
    apiHabitVersionIdDatePatchRaw(requestParameters: ApiHabitVersionIdDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Отметить выполнение привычки на дату
     */
    apiHabitVersionIdDatePatch(requestParameters: ApiHabitVersionIdDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class HabitsApi extends runtime.BaseAPI implements HabitsApiInterface {

    /**
     * Returns all completed or active habits for a user on a given date
     */
    async apiHabitCompletionDateGetRaw(requestParameters: ApiHabitCompletionDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HabitsHabitCompletionDto>>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling apiHabitCompletionDateGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/habit/completion/{date}`;
        urlPath = urlPath.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HabitsHabitCompletionDtoFromJSON));
    }

    /**
     * Returns all completed or active habits for a user on a given date
     */
    async apiHabitCompletionDateGet(requestParameters: ApiHabitCompletionDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HabitsHabitCompletionDto>> {
        const response = await this.apiHabitCompletionDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создать новую привычку
     */
    async apiHabitCreatePostRaw(requestParameters: ApiHabitCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HabitsHabitDto>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiHabitCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/habit/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HabitsCreateHabitDtoToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HabitsHabitDtoFromJSON(jsonValue));
    }

    /**
     * Создать новую привычку
     */
    async apiHabitCreatePost(requestParameters: ApiHabitCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HabitsHabitDto> {
        const response = await this.apiHabitCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all active habits for the authenticated user
     */
    async apiHabitGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HabitsHabitDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/habit/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HabitsHabitDtoFromJSON));
    }

    /**
     * Returns all active habits for the authenticated user
     */
    async apiHabitGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HabitsHabitDto>> {
        const response = await this.apiHabitGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a single active habit by group ID
     */
    async apiHabitGroupIdGetRaw(requestParameters: ApiHabitGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HabitsHabitDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiHabitGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/habit/{groupId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HabitsHabitDtoFromJSON(jsonValue));
    }

    /**
     * Returns a single active habit by group ID
     */
    async apiHabitGroupIdGet(requestParameters: ApiHabitGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HabitsHabitDto> {
        const response = await this.apiHabitGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновить привычку
     */
    async apiHabitUpdateGroupIdPutRaw(requestParameters: ApiHabitUpdateGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HabitsHabitDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiHabitUpdateGroupIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiHabitUpdateGroupIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/habit/update/{groupId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HabitsUpdateHabitDtoToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HabitsHabitDtoFromJSON(jsonValue));
    }

    /**
     * Обновить привычку
     */
    async apiHabitUpdateGroupIdPut(requestParameters: ApiHabitUpdateGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HabitsHabitDto> {
        const response = await this.apiHabitUpdateGroupIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Отметить выполнение привычки на дату
     */
    async apiHabitVersionIdDatePatchRaw(requestParameters: ApiHabitVersionIdDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['versionId'] == null) {
            throw new runtime.RequiredError(
                'versionId',
                'Required parameter "versionId" was null or undefined when calling apiHabitVersionIdDatePatch().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling apiHabitVersionIdDatePatch().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiHabitVersionIdDatePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/habit/{versionId}/{date}`;
        urlPath = urlPath.replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters['versionId'])));
        urlPath = urlPath.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: HabitsCompletionRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Отметить выполнение привычки на дату
     */
    async apiHabitVersionIdDatePatch(requestParameters: ApiHabitVersionIdDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiHabitVersionIdDatePatchRaw(requestParameters, initOverrides);
    }

}
